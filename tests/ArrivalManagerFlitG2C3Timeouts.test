%description:
Test arrival manager: network coded data/mac flit pairs ARQ timeouts

%inifile: omnetpp.ini
[General]
sim-time-limit = 500ns
**.cmdenv-log-level = debug

**.am.arqLimit = 1
**.am.arqIssueTimeout = 8
**.am.arqAnswerTimeoutBase = 5
**.am.lastArqWaitForOngoingVerifications = true

**.awaitSendRequests = true

**.encUnits = 2
**.authUnits = 2
**.busyCyclesEnc = 5
**.busyCyclesAuth = 5
**.encUnit[*].computeCycles = 5
**.authUnit[*].computeCycles = 5

%file: test.ned
import HaecComm.Core.Clock;
import HaecComm.Buffers.PacketQueue;
import HaecComm.MW.ArrivalManagerFlit;
import HaecComm.MW.Crypto.*;

network Test {
    parameters:
        int rows = 4;
        int columns = 4;
        int id = 0;
        int encUnits;
        int authUnits;
        double clockPeriod @unit(s) = 2ns;
    submodules:
        clock: Clock { inter = clockPeriod; }
        am: ArrivalManagerFlit;
        appQ: PacketQueue;
        authQ: PacketQueue;
        netQ: PacketQueue;
        entryGuard: EntryGuardFlit {
            gates:
                encOut[encUnits];
                authOut[authUnits];
        }
        encUnit[encUnits]: EncFlit;
        authUnit[authUnits]: AuthFlit;
        exitGuard: ExitGuardFlit {
            gates:
                encIn[encUnits];
                authIn[authUnits];
        }
        testapp: ArrivalManagerFlitG2C3TimeoutsTestApp;
    connections:
        testapp.appIn <-- am.appOut;
        testapp.arqIn <-- am.arqOut;
        testapp.netOut --> am.netIn;

        am.cryptoOut --> netQ.in;
        entryGuard.netIn <-- netQ.out;

        testapp.appQOut --> appQ.in;
        entryGuard.appIn <-- appQ.out;

        exitGuard.entryOut --> authQ.in;
        entryGuard.exitIn <-- authQ.out;

        for i=0..encUnits-1 {
            encUnit[i].in <-- entryGuard.encOut[i];
            encUnit[i].out --> exitGuard.encIn[i];
        }

        for i=0..authUnits-1 {
            authUnit[i].in <-- entryGuard.authOut[i];
            authUnit[i].out --> exitGuard.authIn[i];
        }

        exitGuard.appOut --> am.cryptoIn;
        exitGuard.netOut --> testapp.retBufIn;
}

%contains-regex: stdout
8 Got ARQ arq-123-s\(0,0\)-t\(3,3\)
Source \(0,0\)
Target \(3,3\)
GID 123
Mode MODE_ARQ_TELL_RECEIVED
ARQ modes \(1,ARQ_DATA\)
.*
12 Got ARQ arq-123-s\(0,0\)-t\(2,2\)
Source \(0,0\)
Target \(2,2\)
GID 123
Mode MODE_ARQ_TELL_RECEIVED
ARQ modes \(2,ARQ_MAC\)\(5,ARQ_DATA\)
.*
14 Got ARQ arq-222-s\(0,0\)-t\(3,3\)
Source \(0,0\)
Target \(3,3\)
GID 222
Mode MODE_ARQ_TELL_MISSING
ARQ modes \(1,ARQ_DATA_MAC\)\(42,ARQ_DATA_MAC\)
.*
25 Got ARQ arq-42-s\(0,0\)-t\(1,1\)
Source \(0,0\)
Target \(1,1\)
GID 42
Mode MODE_ARQ_TELL_MISSING
ARQ modes \(25,ARQ_DATA\)\(28,ARQ_DATA\)

%not-contains: stdout
undisposed object:

%not-contains: stdout
-- check module destructor
