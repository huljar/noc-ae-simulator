%description:
Test arrival manager: network coded data/mac flit pairs ARQ timeouts
If a loss ARQ is planned (waiting to be sent, but held because
verificaiton is going on), and the missing flits arrive during this period,
the ARQ should be canceled.

%inifile: omnetpp.ini
[General]
sim-time-limit = 500ns
**.cmdenv-log-level = debug

**.networkCoding = true
**.generationSize = 2
**.numCombinations = 3

**.decoder.internalType = "HaecComm.MW.NetworkCoding.DecoderImplFlit"

**.am.arqLimit = 1
**.am.arqIssueTimeout = 4
**.am.arqAnswerTimeoutBase = 5
**.am.lastArqWaitForOngoingVerifications = true

**.awaitSendRequests = true

**.encUnits = 5
**.authUnits = 5
**.busyCyclesEnc = 4
**.busyCyclesAuth = 8
**.encUnit[*].computeCycles = 4
**.authUnit[*].computeCycles = 8

%file: test.ned
import HaecComm.Core.Clock;
import HaecComm.Buffers.PacketQueue;
import HaecComm.MW.ArrivalManagerFlit;
import HaecComm.MW.Crypto.*;
import HaecComm.MW.NetworkCoding.*;

network Test {
    parameters:
        bool useGlobalTransmissionIds = false;
        bool networkCoding;
        int generationSize;
        int rows = 4;
        int columns = 4;
        int id = 0;
        int encUnits;
        int authUnits;
        double clockPeriod @unit(s) = 2ns;
    submodules:
        clock: Clock { inter = clockPeriod; }
        am: ArrivalManagerFlit;
        appQ: PacketQueue;
        authQ: PacketQueue;
        verQ: PacketQueue;
        decQ: PacketQueue;
        decoder: Decoder;
        entryGuard: EntryGuardFlit {
            gates:
                encOut[encUnits];
                authOut[authUnits];
        }
        encUnit[encUnits]: EncFlit;
        authUnit[authUnits]: AuthFlit;
        exitGuard: ExitGuardFlit {
            gates:
                encIn[encUnits];
                authIn[authUnits];
        }
        testapp: AMFlitG2C3RemovePlannedARQTestApp;
    connections:
        testapp.appIn <-- am.appOut;
        testapp.arqIn <-- am.arqOut;
        testapp.netOut --> am.netIn;

        am.verOut --> verQ.in;
        entryGuard.verIn <-- verQ.out;

        am.decOut --> decoder.in;
        decoder.out --> decQ.in;
        entryGuard.decIn <-- decQ.out;

        testapp.appQOut --> appQ.in;
        entryGuard.appIn <-- appQ.out;

        exitGuard.entryOut --> authQ.in;
        entryGuard.exitIn <-- authQ.out;

        for i=0..encUnits-1 {
            encUnit[i].in <-- entryGuard.encOut[i];
            encUnit[i].out --> exitGuard.encIn[i];
        }

        for i=0..authUnits-1 {
            authUnit[i].in <-- entryGuard.authOut[i];
            authUnit[i].out --> exitGuard.authIn[i];
        }

        exitGuard.appOut --> am.cryptoIn;
        exitGuard.netOut --> testapp.retBufIn;
}

%contains-regex: stdout
Initiating planned ARQ.*
Canceling planned ARQ.*
14 Got flit uc-222-s\(1,0\)-t\(0,0\)-dec
Source \(1,0\)
Target \(0,0\)
FID 222
Mode MODE_DATA
.*
14 Got flit uc-333-s\(1,0\)-t\(0,0\)-dec
Source \(1,0\)
Target \(0,0\)
FID 333
Mode MODE_DATA

%not-contains: stdout
Got ARQ

%not-contains: stdout
undisposed object:

%not-contains: stdout
-- check module destructor
